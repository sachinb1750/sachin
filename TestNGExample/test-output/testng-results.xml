<?xml version="1.0" encoding="UTF-8"?>
<testng-results skipped="0" failed="1" ignored="8" total="18" passed="9">
  <reporter-output>
  </reporter-output>
  <suite name="Test Suite" duration-ms="61" started-at="2019-02-14T15:25:29Z" finished-at="2019-02-14T15:25:29Z">
    <groups>
      <group name="regression">
        <method signature="testngbasic1.globalData()[pri:0, instance:testexample.testngbasic1@5d5eef3d]" name="globalData" class="testexample.testngbasic1"/>
        <method signature="testngbasic1.regression1(java.lang.String, java.lang.String)[pri:0, instance:testexample.testngbasic1@5d5eef3d]" name="regression1" class="testexample.testngbasic1"/>
        <method signature="testngbasic1.regression2(java.lang.String)[pri:0, instance:testexample.testngbasic1@5d5eef3d]" name="regression2" class="testexample.testngbasic1"/>
        <method signature="testngbasic1.regression3()[pri:0, instance:testexample.testngbasic1@5d5eef3d]" name="regression3" class="testexample.testngbasic1"/>
        <method signature="testng1.dataProviderTest(java.lang.String, java.lang.String)[pri:0, instance:testexercise.testng1@18be83e4]" name="dataProviderTest" class="testexercise.testng1"/>
        <method signature="testng1.regression1()[pri:0, instance:testexercise.testng1@18be83e4]" name="regression1" class="testexercise.testng1"/>
        <method signature="testng1.regression2(java.lang.String)[pri:0, instance:testexercise.testng1@18be83e4]" name="regression2" class="testexercise.testng1"/>
        <method signature="testng1.regression3()[pri:0, instance:testexercise.testng1@18be83e4]" name="regression3" class="testexercise.testng1"/>
      </group> <!-- regression -->
    </groups>
    <test name="Regression 1" duration-ms="58" started-at="2019-02-14T15:25:29Z" finished-at="2019-02-14T15:25:29Z">
      <class name="testexample.testngbasic1">
        <test-method status="PASS" signature="globalData()[pri:0, instance:testexample.testngbasic1@5d5eef3d]" name="globalData" duration-ms="12" started-at="2019-02-14T15:25:29Z" finished-at="2019-02-14T15:25:29Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- globalData -->
        <test-method status="PASS" signature="regression1(java.lang.String, java.lang.String)[pri:0, instance:testexample.testngbasic1@5d5eef3d]" name="regression1" duration-ms="2" started-at="2019-02-14T15:25:29Z" finished-at="2019-02-14T15:25:29Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[Starting First Test Case : Global]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Regression TCs Execution Started]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- regression1 -->
        <test-method status="PASS" signature="regression2(java.lang.String)[pri:0, instance:testexample.testngbasic1@5d5eef3d]" name="regression2" duration-ms="2" started-at="2019-02-14T15:25:29Z" finished-at="2019-02-14T15:25:29Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[Starting Second Test Case  :Local Regression 1]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- regression2 -->
        <test-method status="PASS" signature="regression3()[pri:0, instance:testexample.testngbasic1@5d5eef3d]" name="regression3" duration-ms="2" started-at="2019-02-14T15:25:29Z" finished-at="2019-02-14T15:25:29Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- regression3 -->
      </class> <!-- testexample.testngbasic1 -->
    </test> <!-- Regression 1 -->
    <test name="Regression 2" duration-ms="61" started-at="2019-02-14T15:25:29Z" finished-at="2019-02-14T15:25:29Z">
      <class name="testexercise.testng1">
        <test-method status="PASS" signature="dataProviderTest(java.lang.String, java.lang.String)[pri:0, instance:testexercise.testng1@18be83e4]" name="dataProviderTest" duration-ms="8" started-at="2019-02-14T15:25:29Z" data-provider="getData" finished-at="2019-02-14T15:25:29Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[Intelligent : 1]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Intelligent : 2]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- dataProviderTest -->
        <test-method status="PASS" signature="dataProviderTest(java.lang.String, java.lang.String)[pri:0, instance:testexercise.testng1@18be83e4]" name="dataProviderTest" duration-ms="4" started-at="2019-02-14T15:25:29Z" data-provider="getData" finished-at="2019-02-14T15:25:29Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[Average : 1]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Average : 2]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- dataProviderTest -->
        <test-method status="PASS" signature="dataProviderTest(java.lang.String, java.lang.String)[pri:0, instance:testexercise.testng1@18be83e4]" name="dataProviderTest" duration-ms="2" started-at="2019-02-14T15:25:29Z" data-provider="getData" finished-at="2019-02-14T15:25:29Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[Poor : 1]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Poor : 2]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- dataProviderTest -->
        <test-method status="PASS" signature="regression1()[pri:0, instance:testexercise.testng1@18be83e4]" name="regression1" duration-ms="1" started-at="2019-02-14T15:25:29Z" finished-at="2019-02-14T15:25:29Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- regression1 -->
        <test-method status="PASS" signature="regression2(java.lang.String)[pri:0, instance:testexercise.testng1@18be83e4]" name="regression2" duration-ms="3" started-at="2019-02-14T15:25:29Z" finished-at="2019-02-14T15:25:29Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[Starting Second Test Case  :Local - Regression 2]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- regression2 -->
        <test-method status="FAIL" signature="regression3()[pri:0, instance:testexercise.testng1@18be83e4]" name="regression3" duration-ms="5" started-at="2019-02-14T15:25:29Z" finished-at="2019-02-14T15:25:29Z">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [true] but found [false]
at org.testng.Assert.fail(Assert.java:96)
at org.testng.Assert.failNotEquals(Assert.java:776)
at org.testng.Assert.assertTrue(Assert.java:44)
at org.testng.Assert.assertTrue(Assert.java:54)
at testexercise.testng1.regression3(testng1.java:34)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
at java.lang.reflect.Method.invoke(Unknown Source)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:124)
at org.testng.internal.Invoker.invokeMethod(Invoker.java:580)
at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:716)
at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:988)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
at org.testng.TestRunner.privateRun(TestRunner.java:648)
at org.testng.TestRunner.run(TestRunner.java:505)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:455)
at org.testng.SuiteRunner.access$000(SuiteRunner.java:40)
at org.testng.SuiteRunner$SuiteWorker.run(SuiteRunner.java:489)
at org.testng.internal.thread.ThreadUtil$1.call(ThreadUtil.java:52)
at java.util.concurrent.FutureTask.run(Unknown Source)
at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
at java.lang.Thread.run(Unknown Source)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- regression3 -->
      </class> <!-- testexercise.testng1 -->
    </test> <!-- Regression 2 -->
  </suite> <!-- Test Suite -->
</testng-results>
